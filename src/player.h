//
// Created by Pablo on 09.08.2020.
//

#ifndef PLATFORMOWKA_AGAIN_PLAYER_H
#define PLATFORMOWKA_AGAIN_PLAYER_H
#include <vector>
#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <SFML/Audio.hpp>
#include <SFML/System.hpp>


class Player {
public:
    //------------------------ STATE -------------------------
    enum class State{
        IDLE,
        JUMP,
        MOVING_R,
        MOVING_L,
        GROUND,
        DEAD
    };

    Player();                                   // Player object constructor
    ~Player();                                  // Player object deconstructor

    void update();                              // Updates the player position,state etc.
    void updatePhysics();                       // Updates the physics of a player character
    void updateMovement();                      // Reaction for key-pressing movement of player object
    void updateAnimations();                    // Updates the animation of player while in movement
    void render(sf::RenderTarget* target);      // Renders player object in the specified target (window)


private:

    //--------------------- ATTRIBUTES -----------------------
    sf::Texture textureSheet;   // Texture pattern for the player object
    sf::Sprite sprite;          // Sprite object for player
    sf::IntRect frame;          // Currently displayed texture frame
    sf::Clock animationTimer;   // Animation timer to prevent it from executing too fast
    sf::Vector2f position;
    State state;                // Enum variable indicating in which state player's character currently is
    bool in_air;         // Flag determining whether the player's character is in the air (jumping/falling)

        // --------------- VELOCITY CONTROL -------------------
        sf::Vector2f velocity;                  // 2-dimensional vector of velocity (in x and y dimensions)
        const float kAccel = 1.4f;              // Constant acceleration ratio
        const float kDrag = 0.9f;               // Constant slowing-down ratio
        const float kVelocityMax = 6.f;        // Upper cap value of velocity
        const float kVelocityMin = 1.f;         // Upper cap value of velocity
        float gravity = 1.5f;                   // Gravity drag force acceleration
        const float kMaxGravity = 10.f;         // Maximal velocity generated by drag force
        const float kMinGravity = 0.f;          // Minimal velocity reached while jumping
        const float kJumpAccel = -10.f;
        bool gravitySwitch;                     // Flag indicating if we should turn off the gravity true - on



    //------------------------ METHODS------------------------
    void move(const float dir_x, const float dir_y);
    void initTexture();                                 // Initializes the texture from file for player object
    void initSprite();                                  // Initializes the sprite from textures for player object
    void initAnimations();                              // Initializes the animations
    static bool IsAnyKeyPressed();                             // Returns if any key is pressed
};


#endif //PLATFORMOWKA_AGAIN_PLAYER_H
