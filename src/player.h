//
// Created by Pablo on 09.08.2020.
//

#ifndef PLAYER_H_
#define PLAYER_H_
#include <vector>
#include <cstdlib>
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>

// Forwward delcaration for Game class to avoid circular dependencies

class Player {
public:
    //------------------------------------------ STATE ----------------------------------------
    enum class State{
        IDLE,
        MOVING_R,
        MOVING_L,
        DEAD
    };

    Player();                                       // Player object constructor
    ~Player();                                      // Player object de-constructor

    //------------------------------------- METHODS -----------------------------------------
    void update();                                  // Updates the player position,state etc.
    void updatePhysics();                           // Updates the physics of a player character
    void updateMovement();                          // Reaction for key-pressing movement of player object
    void updateAnimations();                        // Updates the animation of player while in movement
    const sf::FloatRect getGlobalBounds() const;    // Getting the bounds of sprite rectangle
    void setPlayerPosition(const float x, const float y);   // Sets the sprite position - simply
    void render(sf::RenderTarget* target);          // Renders player object in the specified target (window)
    sf::Vector2f getVelocity();                     // Getter for velocity
    void setVelocity(float x, float y);             // Setter for velocity
    void setIsOnPlatform(bool x);                   // Setter of the platform flag
    void resetJump();                               // Reset jump counter to 0
    void Jump();                                    // Jump for passes with events trigger
    bool dead;                                      // Player dead or not


private:
    //----------------------------------------- ATTRIBUTES --------------------------------------------
    sf::Texture textureSheet;   // Texture pattern for the player object
    sf::Sprite sprite;          // Sprite object for the player
    sf::IntRect frame;          // Currently displayed texture frame
    sf::SoundBuffer sbuffer;              // Sound buffer for game window
    sf::Sound sound;                      // Sound for game window
    sf::Clock animationTimer;   // Animation timer to prevent it from executing too fast
    State state;                // Enum variable indicating in which state player's character currently is
    sf::Vector2f position;      // Players position
    bool isOnPlatform;          // Flag determining whether the player is on the platform
    int jumpcount;


        // ---------------------------------- VELOCITY CONTROL ----------------------------------------
        sf::Vector2f velocity;                  // 2-dimensional vector of velocity (in x and y dimensions)
        const float kAccel = 1.4f;              // Constant acceleration ratio
        const float kDrag = 0.9f;               // Constant slowing-down ratio
        const float kVelocityMax = 6.f;         // Upper cap value of velocity
        const float kVelocityMin = 1.f;         // Upper cap value of velocity
        float gravity = 1.5f;                   // Gravity drag force acceleration
        const float kMaxGravity = 26.f;         // Maximal velocity generated by drag force
        const float kJumpAccel = -25.f;         // Velocity written directly after jump execution

    //-------------------------------------------- METHODS--------------------------------------------
    void move(const float dir_x, const float dir_y);
    void initTexture();                                 // Initializes the texture from file for player object
    void initSprite();                                  // Initializes the sprite from textures for player object
    void initAnimations();                              // Initializes the animations
    static bool IsAnyKeyPressed();                             // Returns if any key is pressed
};


#endif //PLAYER_H_